<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Word Search Puzzle</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
        }

        h1 {
            font-size: 20px;
            margin-bottom: 5px;
            color: #333;
            text-align: center;
        }

        .puzzle-wrapper {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            gap: 1px;
            max-width: 90vw;
            padding: 10px;
            flex-direction: column;
            align-items: center;
        }

        .word-search-container {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-gap: 1px;
            border: 1px solid #333;
            padding: 2px;
            background-color: #fff;
            width: 500px;
            height: 500px;
        }

        .word-search-cell {
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5vw;
            border: 1px solid #ddd;
            user-select: none;
            cursor: pointer;
            height: 3vw;
            width: 3vw;
        }

        .word-search-cell.selected {
            background-color: #cce7ff;
        }

        .word-search-cell.found {
            background-color: #a8d5e2;
        }

        .word-list {
            text-align: center;
            margin-top: 35px;
        }

        ul {
            list-style-type: none;
            padding: 0;
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
        }

        ul li {
            margin-right: 15px;
            font-size: 16px;
        }

        #restartBtn {
            display: none;
            margin-top: 15px;
            padding: 8px 16px;
            font-size: 14px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }

        #congratulationsMessage {
            display: none;
            font-size: 18px;
            color: #28a745;
            margin-top: 15px;
        }

        #confettiCanvas {
            position: absolute;
            top: 0;
            left: 0;
            pointer-events: none;
        }
    </style>
</head>
<body>

    <canvas id="confettiCanvas"></canvas>

    <h1>Word Search Puzzle</h1>

    <div class="puzzle-wrapper">
        <div class="word-search-container" id="wordSearchContainer">
            <!-- JavaScript will populate the grid -->
        </div>

        <div class="word-list">
            <h3>Find the Words:</h3>
            <ul id="wordList">
                <!-- Word list goes here -->
            </ul>
        </div>
    </div>

    <div id="congratulationsMessage">Congratulations! You found all the words!</div>

    <button id="restartBtn" onclick="restartPuzzle()">Restart Puzzle</button>

    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js" async></script>
    <script>
        const gridSize = 10;
        const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const words = ['KARAFUU', 'HARADALI', 'SHAMIRI', 'PAKANGA', 'KITUNGUU', 'MDALASINI', 'DHANIA', 'PILIPILI', 'NYANYA', 'CHUMVI'];
        const colors = ['#FF5733', '#33FF57', '#5733FF', '#FF33A1', '#FF33F6', '#FFD733', '#33FFDC', '#FF6B33', '#33D3FF', '#FFC733'];
        let grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(''));
        let wordsFound = 0;

        function getRandomLetter() {
            return alphabet[Math.floor(Math.random() * alphabet.length)];
        }

        function placeWord(word) {
            let placed = false;
            let attempts = 0;
            while (!placed && attempts < 100) {
                const direction = Math.floor(Math.random() * 8); // 8 directions
                let row, col;

                if (direction === 0) { // Horizontal Left to Right
                    row = Math.floor(Math.random() * gridSize);
                    col = Math.floor(Math.random() * (gridSize - word.length));
                } else if (direction === 1) { // Horizontal Right to Left
                    row = Math.floor(Math.random() * gridSize);
                    col = Math.floor(Math.random() * (gridSize - word.length)) + word.length - 1;
                } else if (direction === 2) { // Vertical Down
                    row = Math.floor(Math.random() * (gridSize - word.length));
                    col = Math.floor(Math.random() * gridSize);
                } else if (direction === 3) { // Vertical Up
                    row = Math.floor(Math.random() * gridSize) + word.length - 1;
                    col = Math.floor(Math.random() * gridSize);
                } else if (direction === 4) { // Diagonal Down Right
                    row = Math.floor(Math.random() * (gridSize - word.length));
                    col = Math.floor(Math.random() * (gridSize - word.length));
                } else if (direction === 5) { // Diagonal Up Left
                    row = Math.floor(Math.random() * gridSize) + word.length - 1;
                    col = Math.floor(Math.random() * gridSize) + word.length - 1;
                } else if (direction === 6) { // Diagonal Down Left
                    row = Math.floor(Math.random() * (gridSize - word.length));
                    col = Math.floor(Math.random() * (gridSize - word.length)) + word.length - 1;
                } else { // Diagonal Up Right
                    row = Math.floor(Math.random() * gridSize) + word.length - 1;
                    col = Math.floor(Math.random() * (gridSize - word.length));
                }

                let fits = true;
                for (let i = 0; i < word.length; i++) {
                    const r = direction < 4 ? (direction < 2 ? row : row + i) : (direction < 6 ? row + i : row - i);
                    const c = direction % 2 === 0 ? (direction < 4 ? col + i : col) : (direction < 6 ? col - i : col);
                    
                    if (grid[r] === undefined || grid[r][c] === undefined || (grid[r][c] !== '' && grid[r][c] !== word[i])) {
                        fits = false;
                        break;
                    }
                }

                if (fits) {
                    for (let i = 0; i < word.length; i++) {
                        const r = direction < 4 ? (direction < 2 ? row : row + i) : (direction < 6 ? row + i : row - i);
                        const c = direction % 2 === 0 ? (direction < 4 ? col + i : col) : (direction < 6 ? col - i : col);
                        grid[r][c] = word[i];
                    }
                    placed = true;
                }
                attempts++;
            }
            if (attempts >= 100) {
                console.error(`Could not place word: ${word}`);
            }
        }

        words.forEach(word => placeWord(word));

        for (let row = 0; row < gridSize; row++) {
            for (let col = 0; col < gridSize; col++) {
                if (grid[row][col] === '') {
                    grid[row][col] = getRandomLetter();
                }
            }
        }

        const wordSearchContainer = document.getElementById('wordSearchContainer');
        grid.forEach((row, rowIndex) => {
            row.forEach((letter, colIndex) => {
                const cell = document.createElement('div');
                cell.textContent = letter;
                cell.className = 'word-search-cell';
                cell.dataset.row = rowIndex;
                cell.dataset.col = colIndex;
                wordSearchContainer.appendChild(cell);
            });
        });

        const wordList = document.getElementById('wordList');
        words.forEach((word, index) => {
            const li = document.createElement('li');
            li.textContent = word;
            li.dataset.color = colors[index];
            wordList.appendChild(li);
        });

        let selectedCells = [];
        let isSelecting = false;

        function selectCell(cell) {
            if (!cell.classList.contains('selected')) {
                cell.classList.add('selected');
                selectedCells.push(cell);
            }
        }

        function checkSelectedWord() {
            const selectedLetters = selectedCells.map(cell => cell.textContent).join('');
            const wordIndex = words.indexOf(selectedLetters);
            if (wordIndex !== -1) {
                selectedCells.forEach(cell => cell.classList.add('found'));
                wordsFound++;
                wordList.children[wordIndex].style.textDecoration = 'line-through';
                if (wordsFound === words.length) {
                    document.getElementById('congratulationsMessage').style.display = 'block';
                    document.getElementById('restartBtn').style.display = 'block';
                    createConfetti();
                }
            }
            selectedCells = [];
            [...wordSearchContainer.children].forEach(cell => cell.classList.remove('selected'));
        }

        function createConfetti() {
            const confettiCanvas = document.getElementById('confettiCanvas');
            const ctx = confettiCanvas.getContext('2d');
            confettiCanvas.width = window.innerWidth;
            confettiCanvas.height = window.innerHeight;
            const animationEnd = Date.now() + 3000;
            const confettiColors = ['#FF5733', '#33FF57', '#5733FF', '#FF33A1', '#FF33F6', '#FFD733', '#33FFDC', '#FF6B33', '#33D3FF', '#FFC733'];

            (function frame() {
                const timeLeft = animationEnd - Date.now();
                if (timeLeft <= 0) {
                    return;
                }

                const particleCount = 200 * (Math.random() + 0.2);
                confetti({ particleCount, colors: confettiColors });
                requestAnimationFrame(frame);
            })();
        }

        document.getElementById('wordSearchContainer').addEventListener('mousedown', (event) => {
            if (event.target.classList.contains('word-search-cell')) {
                isSelecting = true;
                selectCell(event.target);
            }
        });

        document.getElementById('wordSearchContainer').addEventListener('mouseover', (event) => {
            if (isSelecting && event.target.classList.contains('word-search-cell')) {
                selectCell(event.target);
            }
        });

        document.addEventListener('mouseup', () => {
            if (isSelecting) {
                checkSelectedWord();
                isSelecting = false;
            }
        });

        function restartPuzzle() {
            grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(''));
            wordsFound = 0;
            document.getElementById('congratulationsMessage').style.display = 'none';
            document.getElementById('restartBtn').style.display = 'none';
            wordList.querySelectorAll('li').forEach(li => li.style.textDecoration = 'none');
            [...wordSearchContainer.children].forEach(cell => cell.classList.remove('found', 'selected'));
            words.forEach(word => placeWord(word));
            for (let row = 0; row < gridSize; row++) {
                for (let col = 0; col < gridSize; col++) {
                    if (grid[row][col] === '') {
                        grid[row][col] = getRandomLetter();
                    }
                }
            }
            grid.forEach((row, rowIndex) => {
                row.forEach((letter, colIndex) => {
                    wordSearchContainer.children[rowIndex * gridSize + colIndex].textContent = letter;
                });
            });
        }
    </script>
</body>
</html>
